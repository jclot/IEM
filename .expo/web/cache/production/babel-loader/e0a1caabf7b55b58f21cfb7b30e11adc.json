{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";export default React.forwardRef(function CardSheet(_ref,ref){var enabled=_ref.enabled,layout=_ref.layout,style=_ref.style,rest=_objectWithoutProperties(_ref,[\"enabled\",\"layout\",\"style\"]);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),fill=_React$useState2[0],setFill=_React$useState2[1];React.useEffect(function(){if(typeof document==='undefined'||!document.body){return;}var width=document.body.clientWidth;var height=document.body.clientHeight;setFill(width===layout.width&&height===layout.height);},[layout.height,layout.width]);return React.createElement(View,_extends({},rest,{ref:ref,style:[enabled&&fill?styles.page:styles.card,style]}));});var styles=StyleSheet.create({page:{minHeight:'100%'},card:{flex:1,overflow:'hidden'}});","map":{"version":3,"sources":["CardSheet.tsx"],"names":["style","rest","React","document","width","height","setFill","layout","enabled","styles","page","minHeight","card","flex","overflow"],"mappings":"giCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAaA,cAAe,CAAA,KAAK,CAAL,UAAA,CAA8B,QAAA,CAAA,SAAA,CAAA,IAAA,CAAA,GAAA,CAG3C,IAFA,CAAA,OAEA,CAAA,IAAA,CAFA,OAEA,CAFA,MAEA,CAAA,IAAA,CAFA,MAEA,CAFmBA,KAEnB,CAAA,IAAA,CAFmBA,KAEnB,CAF6BC,IAE7B,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,SAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,qBACwBC,KAAK,CAALA,QAAAA,CAAxB,KAAwBA,CADxB,oDACM,IADN,qBACM,OADN,qBAGAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAI,MAAA,CAAA,QAAA,GAAA,WAAA,EAAmC,CAACC,QAAQ,CAAhD,IAAA,CAAuD,CAErD,OACD,CAED,GAAMC,CAAAA,KAAK,CAAGD,QAAQ,CAARA,IAAAA,CAAd,WAAA,CACA,GAAME,CAAAA,MAAM,CAAGF,QAAQ,CAARA,IAAAA,CAAf,YAAA,CAEAG,OAAO,CAACF,KAAK,GAAKG,MAAM,CAAhBH,KAAAA,EAA0BC,MAAM,GAAKE,MAAM,CAAnDD,MAAO,CAAPA,CATFJ,CAAAA,CAUG,CAACK,MAAM,CAAP,MAAA,CAAgBA,MAAM,CAVzBL,KAUG,CAVHA,EAYA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,GAAG,CAFL,GAAA,CAGE,KAAK,CAAE,CAACM,OAAO,EAAPA,IAAAA,CAAkBC,MAAM,CAAxBD,IAAAA,CAAgCC,MAAM,CAAvC,IAAA,CAAA,KAAA,CAHT,CAAA,CAAA,CADF,CAlBF,CAAe,CAAf,CA2BA,GAAMA,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BC,IAAI,CAAE,CACJC,SAAS,CAAE,MADP,CADyB,CAI/BC,IAAI,CAAE,CACJC,IAAI,CADA,CAAA,CAEJC,QAAQ,CAAE,QAFN,CAJyB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, ViewProps, StyleSheet } from 'react-native';\n\ntype Props = ViewProps & {\n  enabled: boolean;\n  layout: { width: number; height: number };\n  children: React.ReactNode;\n};\n\n// This component will render a page which overflows the screen\n// if the container fills the body by comparing the size\n// This lets the document.body handle scrolling of the content\n// It's necessary for mobile browsers to be able to hide address bar on scroll\nexport default React.forwardRef<View, Props>(function CardSheet(\n  { enabled, layout, style, ...rest },\n  ref\n) {\n  const [fill, setFill] = React.useState(false);\n\n  React.useEffect(() => {\n    if (typeof document === 'undefined' || !document.body) {\n      // Only run when DOM is available\n      return;\n    }\n\n    const width = document.body.clientWidth;\n    const height = document.body.clientHeight;\n\n    setFill(width === layout.width && height === layout.height);\n  }, [layout.height, layout.width]);\n\n  return (\n    <View\n      {...rest}\n      ref={ref}\n      style={[enabled && fill ? styles.page : styles.card, style]}\n    />\n  );\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    minHeight: '100%',\n  },\n  card: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}