{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{CommonActions}from'@react-navigation/routers';export default function useNavigationCache(_ref){var state=_ref.state,getState=_ref.getState,navigation=_ref.navigation,_setOptions=_ref.setOptions,router=_ref.router,emitter=_ref.emitter;var cache=React.useMemo(function(){return{current:{}};},[getState,navigation,_setOptions,router,emitter]);var actions=_objectSpread(_objectSpread({},router.actionCreators),CommonActions);cache.current=state.routes.reduce(function(acc,route){var previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{var emit=navigation.emit,rest=_objectWithoutProperties(navigation,[\"emit\"]);var dispatch=function dispatch(action){var payload=typeof action==='function'?action(getState()):action;navigation.dispatch(typeof payload==='object'&&payload!=null?_objectSpread({source:route.key},payload):payload);};var helpers=Object.keys(actions).reduce(function(acc,name){acc[name]=function(){return dispatch(actions[name].apply(actions,arguments));};return acc;},{});acc[route.key]=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},rest),helpers),emitter.create(route.key)),{},{dispatch:dispatch,setOptions:function setOptions(options){return _setOptions(function(o){return _objectSpread(_objectSpread({},o),{},_defineProperty2({},route.key,_objectSpread(_objectSpread({},o[route.key]),options)));});},isFocused:function isFocused(){var state=getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return cache.current;}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["setOptions","emitter","cache","current","actions","router","previous","route","acc","emit","dispatch","action","payload","getState","navigation","source","key","helpers","options","o","isFocused","state"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}