{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _jsxFileName=\"/Users/brentvatne/code/react-native-appearance/src/NativeAppearance.web.tsx\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import SyntheticPlatformEmitter from\"./web/SyntheticPlatformEmitter\";function getQuery(){if(typeof window==='undefined'||!window.matchMedia)return null;return window.matchMedia('(prefers-color-scheme: dark)');}function isMediaQueryList(query){return query&&query.addListener&&query.removeListener&&typeof query.matches==='boolean';}export var NativeAppearance={get name(){return'NativeAppearance';},get initialPreferences(){var query=getQuery();if(isMediaQueryList(query)){return{colorScheme:query.matches?'dark':'light'};}return{colorScheme:'no-preference'};}};export function NativeAppearanceProvider(props){React.useEffect(function(){var query=getQuery();function listener(_ref){var matches=_ref.matches;var colorScheme=matches?'dark':'light';SyntheticPlatformEmitter.emit('appearanceChanged',{colorScheme:colorScheme});}if(query)query.addListener(listener);return function(){if(query){query.removeListener(listener);}};},[]);return React.createElement(View,_extends({style:{flex:1}},props,{__source:{fileName:_jsxFileName,lineNumber:51}}));};","map":{"version":3,"sources":["NativeAppearance.web.tsx"],"names":["window","query","NativeAppearance","getQuery","isMediaQueryList","colorScheme","React","matches","SyntheticPlatformEmitter","flex"],"mappings":"oJAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,qDAKA,MAAA,CAAA,wBAAA,sCAEA,QAAA,CAAA,QAAA,EAA2C,CACzC,GAAI,MAAA,CAAA,MAAA,GAAA,WAAA,EAAiC,CAACA,MAAM,CAA5C,UAAA,CAAyD,MAAA,KAAA,CACzD,MAAOA,CAAAA,MAAM,CAANA,UAAAA,CAAP,8BAAOA,CAAP,CAGF,SAAA,CAAA,gBAAA,CAAA,KAAA,CAA+D,CAC7D,MAAOC,CAAAA,KAAK,EAAIA,KAAK,CAAdA,WAAAA,EAA8BA,KAAK,CAAnCA,cAAAA,EAAsD,MAAOA,CAAAA,KAAK,CAAZ,OAAA,GAA7D,SAAA,CAGF,OAAO,IAAMC,CAAAA,gBAAgB,CAAG,CAC9B,GAAA,CAAA,IAAA,EAAmB,CACjB,MAAA,kBAAA,CAF4B,CAAA,CAI9B,GAAA,CAAA,kBAAA,EAAgD,CAC9C,GAAMD,CAAAA,KAAK,CAAGE,QAAd,EAAA,CACA,GAAIC,gBAAgB,CAApB,KAAoB,CAApB,CAA6B,CAC3B,MAAO,CAAEC,WAAW,CAAEJ,KAAK,CAALA,OAAAA,CAAAA,MAAAA,CAAtB,OAAO,CAAP,CAEF,OAAO,CAAEI,WAAW,CAApB,eAAO,CAAP,CATG,CAAyB,CAAzB,CAaP,MAAO,SAAA,CAAA,wBAAA,CAAA,KAAA,CAA8C,CACnDC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAML,CAAAA,KAAK,CAAGE,QAAd,EAAA,CAEA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAoD,CAAhCI,GAAAA,CAAAA,OAAgC,CAAA,IAAA,CAAhCA,OAAAA,CAClB,GAAMF,CAAAA,WAAW,CAAGE,OAAO,CAAA,MAAA,CAA3B,OAAA,CACAC,wBAAwB,CAAxBA,IAAAA,CAAAA,mBAAAA,CAAmD,CACjDH,WAAW,CADbG,WAAmD,CAAnDA,EAKF,IAAA,KAAA,CACEP,KAAK,CAALA,WAAAA,CAAAA,QAAAA,EAEF,MAAO,WAAM,CACX,GAAA,KAAA,CAAW,CACTA,KAAK,CAALA,cAAAA,CAAAA,QAAAA,EAEH,CAJD,CAAA,CAbFK,CAAAA,CAAAA,EAAAA,EAoBA,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAM,KAAK,CAAE,CAAEG,IAAI,CAAnB,CAAa,CAAb,CAAA,CAAA,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAP,EAAO,CAAA,CAAA,CAAA,CAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { AppearancePreferences } from './Appearance.types';\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nfunction getQuery(): MediaQueryList | null {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    const query = getQuery();\n    if (isMediaQueryList(query)) {\n      return { colorScheme: query.matches ? 'dark' : 'light' }\n    }\n    return { colorScheme: 'no-preference' };\n  },\n};\n\nexport function NativeAppearanceProvider(props: any) {\n  React.useEffect(() => {\n    const query = getQuery();\n\n    function listener({ matches }: MediaQueryListEvent) {\n      const colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme,\n      });\n    }\n\n    if (query)\n      query.addListener(listener);\n\n    return () => {\n      if (query) {\n        query.removeListener(listener)\n      }\n    }\n  }, []);\n\n  return <View style={{ flex: 1 }} {...props} />\n};\n"]},"metadata":{},"sourceType":"module"}