{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";export default function useWindowDimensions(){var _React$useState=React.useState(function(){var _Dimensions$get=Dimensions.get('window'),_Dimensions$get$heigh=_Dimensions$get.height,height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh,_Dimensions$get$width=_Dimensions$get.width,width=_Dimensions$get$width===void 0?0:_Dimensions$get$width;return{height:height,width:width};}),_React$useState2=_slicedToArray(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){var onChange=function onChange(_ref){var window=_ref.window;var width=window.width,height=window.height;setDimensions(function(d){if(width===d.width&&height===d.height){return d;}return{width:width,height:height};});};onChange({window:Dimensions.get('window')});Dimensions.addEventListener('change',onChange);return function(){return Dimensions.addEventListener('change',onChange);};},[]);return dimensions;}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["height","width","Dimensions","React","onChange","window","setDimensions","d"],"mappings":"iEAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,iEAKA,cAAe,SAAA,CAAA,mBAAA,EAA+B,qBACR,KAAK,CAAL,QAAA,CAAe,UAAM,qBAErBE,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAFqB,uCAE/CF,MAF+C,CAE/CA,MAF+C,gCAEjD,CAFiD,6DAEnCC,KAFmC,CAEnCA,KAFmC,gCAE3B,CAF2B,uBAIvD,MAAO,CAAED,MAAF,CAAEA,MAAF,CAAUC,KAAAA,CAAAA,KAAV,CAAP,CAJF,CAAoC,CADQ,oDACtC,UADsC,qBACtC,aADsC,qBAQ5CE,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAwC,IAArCC,CAAAA,MAAqC,MAArCA,MAAqC,IACjD,CAAA,KADiD,CACvD,MADuD,CACjD,KADiD,CACxCL,MADwC,CACvD,MADuD,CACxCA,MADwC,CAGvDM,aAAa,CAAEC,SAAAA,CAAD,CAAO,CACnB,GAAIN,KAAK,GAAKM,CAAC,CAAXN,KAAAA,EAAqBD,MAAM,GAAKO,CAAC,CAArC,MAAA,CAA8C,CAC5C,MAAA,CAAA,CAAA,CACD,CAED,MAAO,CAAEN,KAAF,CAAEA,KAAF,CAASD,MAAAA,CAAAA,MAAT,CAAP,CALFM,CAAa,CAAbA,CAJkB,CACpB,CAcAF,QAAQ,CAAC,CAAEC,MAAM,CAAEH,UAAU,CAAVA,GAAAA,CAAAA,QAAAA,CAAV,CAAD,CAARE,CAEAF,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAEA,MAAO,kBAAMA,CAAAA,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,CAAb,QAAaA,CAAN,EAAP,CAnBFC,CAAAA,CAAAA,EAAAA,EAsBA,MAAA,CAAA,UAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.addEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}