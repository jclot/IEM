{"ast":null,"code":"function _createForOfIteratorHelperLoose(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}it=o[typeof Symbol===\"function\"?Symbol.iterator:\"@@iterator\"]();return it.next.bind(it);}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useFocusedListenersChildrenAdapter(_ref){var navigation=_ref.navigation,focusedListeners=_ref.focusedListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addListener=_React$useContext.addListener;var listener=React.useCallback(function(callback){if(navigation.isFocused()){for(var _iterator=_createForOfIteratorHelperLoose(focusedListeners),_step;!(_step=_iterator()).done;){var _listener=_step.value;var _listener2=_listener(callback),handled=_listener2.handled,result=_listener2.result;if(handled){return{handled:handled,result:result};}}return{handled:true,result:callback(navigation)};}else{return{handled:false,result:null};}},[focusedListeners,navigation]);React.useEffect(function(){return addListener===null||addListener===void 0?void 0:addListener('focus',listener);},[addListener,listener]);}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["focusedListeners","addListener","React","listener","callback","navigation","result","handled"],"mappings":"2nCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAEA,MAAA,CAAA,wBAAA,kCAcA,cAAe,SAAA,CAAA,kCAAA,MAGH,IAH+C,CAAA,UAG/C,MAH+C,UAG/C,CADVA,gBACU,MADVA,gBACU,uBACcE,KAAK,CAALA,UAAAA,CAAxB,wBAAwBA,CADd,CACFD,WADE,mBACFA,WADE,CAGV,GAAME,CAAAA,QAAQ,CAAG,KAAK,CAAL,WAAA,CACdC,SAAAA,QAAD,CAA8C,CAC5C,GAAIC,UAAU,CAAd,SAAIA,EAAJ,CAA4B,CAC1B,kDAAA,gBAAA,mCAAyC,IAAzC,CAAA,SAAyC,4BACXF,SAAQ,CAApC,QAAoC,CADG,CACjC,OADiC,YACjC,OADiC,CACtBG,MADsB,YACtBA,MADsB,CAGvC,GAAA,OAAA,CAAa,CACX,MAAO,CAAEC,OAAF,CAAEA,OAAF,CAAWD,MAAAA,CAAAA,MAAX,CAAP,CACD,CACF,CAED,MAAO,CAAEC,OAAO,CAAT,IAAA,CAAiBD,MAAM,CAAEF,QAAQ,CAAA,UAAA,CAAjC,CAAP,CATF,CAAA,IAUO,CACL,MAAO,CAAEG,OAAO,CAAT,KAAA,CAAkBD,MAAM,CAAE,IAA1B,CAAP,CACD,CAdY,CAAA,CAgBf,CAAA,gBAAA,CAhBF,UAgBE,CAhBe,CAAjB,CAmBAJ,KAAK,CAALA,SAAAA,CAAgB,iBAAMD,CAAAA,WAAN,GAAA,IAAMA,EAAAA,WAAN,GAAA,IAAA,EAAMA,CAAN,IAAA,EAAMA,CAAAA,WAAW,CAAA,OAAA,CAAjCC,QAAiC,CAAjB,EAAhBA,CAAwD,CAAA,WAAA,CAAxDA,QAAwD,CAAxDA,EAID","sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}