{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.dangerouslyGetState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.dangerouslyGetState());}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","useNavigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":"iEAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAEA,MAAA,CAAA,aAAA,uBASA,cAAe,SAAA,CAAA,kBAAA,CAAA,QAAA,CAAyD,CACtE,GAAMA,CAAAA,UAAU,CAAGC,aADmD,EACtE,CADsE,oBAKhDC,KAAK,CAALA,QAAAA,CAAe,iBACnCC,CAAAA,QAAQ,CAACH,UAAU,CANiD,mBAM3DA,EAAD,CAD2B,EAAfE,CALgD,oDAKhE,SALgE,qBAUtE,GAAME,CAAAA,WAAW,CAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB,CAEAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBE,WAAW,CAAXA,OAAAA,CAAAA,QAAAA,CADFF,CAAAA,EAIAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMG,CAAAA,WAAW,CAAG,UAAU,CAAV,WAAA,CAAA,OAAA,CAAiCC,SAAAA,CAAD,CAAO,CACzDC,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG,CADF,CAAoB,CAApB,CAIA,MAAA,CAAA,WAAA,CALFL,CAAAA,CAMG,CANHA,UAMG,CANHA,EAQA,MAAOC,CAAAA,QAAQ,CAACH,UAAU,CAA1B,mBAAgBA,EAAD,CAAf,CACD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]},"metadata":{},"sourceType":"module"}