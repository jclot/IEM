{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useOnRouteFocus(_ref){var router=_ref.router,getState=_ref.getState,sourceRouteKey=_ref.key,setState=_ref.setState;var _React$useContext=React.useContext(NavigationBuilderContext),onRouteFocusParent=_React$useContext.onRouteFocus;return React.useCallback(function(key){var state=getState();var result=router.getStateForRouteFocus(state,key);if(result!==state){setState(result);}if(onRouteFocusParent!==undefined&&sourceRouteKey!==undefined){onRouteFocusParent(sourceRouteKey);}},[getState,onRouteFocusParent,router,setState,sourceRouteKey]);}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["key","setState","onRouteFocus","onRouteFocusParent","React","state","getState","result","router","sourceRouteKey"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAMA,MAAA,CAAA,wBAAA,kCAcA,cAAe,SAAA,CAAA,eAAA,MAKK,IALqD,CAAA,MAKrD,MALqD,MAKrD,CALqD,QAKrD,MALqD,QAKrD,CALqD,cAKrD,MAFlBA,GAEkB,CADlBC,QACkB,MADlBA,QACkB,uBAC2BG,KAAK,CAALA,UAAAA,CAA7C,wBAA6CA,CAD3B,CACID,kBADJ,mBACVD,YADU,CAKlB,MAAO,CAAA,KAAK,CAAL,WAAA,CACJF,SAAAA,GAAD,CAAiB,CACf,GAAMK,CAAAA,KAAK,CAAGC,QAAd,EAAA,CACA,GAAMC,CAAAA,MAAM,CAAGC,MAAM,CAANA,qBAAAA,CAAAA,KAAAA,CAAf,GAAeA,CAAf,CAEA,GAAID,MAAM,GAAV,KAAA,CAAsB,CACpBN,QAAQ,CAARA,MAAQ,CAARA,CACD,CAED,GAAIE,kBAAkB,GAAlBA,SAAAA,EAAoCM,cAAc,GAAtD,SAAA,CAAsE,CACpEN,kBAAkB,CAAlBA,cAAkB,CAAlBA,CACD,CAXE,CAAA,CAaL,CAAA,QAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,QAAA,CAbF,cAaE,CAbK,CAAP,CAeD","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}