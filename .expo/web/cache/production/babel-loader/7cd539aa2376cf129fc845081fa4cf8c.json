{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as React from'react';import{getStateFromPath as getStateFromPathDefault,getPathFromState as getPathFromStateDefault,getActionFromState}from'@react-navigation/core';import{nanoid}from'nanoid/non-secure';import ServerContext from\"./ServerContext\";var createMemoryHistory=function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var path=_ref3.path,state=_ref3.state;var _window$history$state2,_window$history$state3;interrupt();var id=(_window$history$state2=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id)!==null&&_window$history$state2!==void 0?_window$history$state2:nanoid();if(items.length){items[index]={path:path,state:state,id:id};}else{items.push({path:path,state:state,id:id});}window.history.replaceState({id:id},'',path);},go:function go(n){interrupt();if(n>0){n=Math.min(n,items.length-1);}else if(n<0){n=index+n<0?-index:n;}if(n===0){return;}index+=n;return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;};var findMatchingState=function findMatchingState(a,b){if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}var aHistoryLength=a.history?a.history.length:a.routes.length;var bHistoryLength=b.history?b.history.length:b.routes.length;var aRoute=a.routes[a.index];var bRoute=b.routes[b.index];var aChildState=aRoute.state;var bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};var series=function series(cb){var handling=false;var queue=[];var callback=function callback(){var last;return _regeneratorRuntime.async(function callback$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!handling){_context.next=4;break;}queue.unshift(callback);return _context.abrupt(\"return\");case 4:handling=true;_context.next=7;return _regeneratorRuntime.awrap(cb());case 7:_context.prev=7;handling=false;if(queue.length){last=queue.pop();last===null||last===void 0?void 0:last();}return _context.finish(7);case 11:case\"end\":return _context.stop();}}},null,null,[[0,,7,11]],Promise);};return callback;};var isUsingLinking=false;export default function useLinking(ref,_ref4){var _ref4$enabled=_ref4.enabled,enabled=_ref4$enabled===void 0?true:_ref4$enabled,config=_ref4.config,_ref4$getStateFromPat=_ref4.getStateFromPath,getStateFromPath=_ref4$getStateFromPat===void 0?getStateFromPathDefault:_ref4$getStateFromPat,_ref4$getPathFromStat=_ref4.getPathFromState,getPathFromState=_ref4$getPathFromStat===void 0?getPathFromStateDefault:_ref4$getPathFromStat;React.useEffect(function(){if(enabled!==false&&isUsingLinking){throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\"- You are not using both 'linking' prop and 'useLinking'\",\"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());}else{isUsingLinking=enabled!==false;}return function(){isUsingLinking=false;};});var _React$useState=React.useState(createMemoryHistory),_React$useState2=_slicedToArray(_React$useState,1),history=_React$useState2[0];var enabledRef=React.useRef(enabled);var configRef=React.useRef(config);var getStateFromPathRef=React.useRef(getStateFromPath);var getPathFromStateRef=React.useRef(getPathFromState);React.useEffect(function(){enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;},[config,enabled,getPathFromState,getStateFromPath]);var server=React.useContext(ServerContext);var getInitialState=React.useCallback(function(){var value;if(enabledRef.current){var _server$location;var _location=(_server$location=server===null||server===void 0?void 0:server.location)!==null&&_server$location!==void 0?_server$location:typeof window!=='undefined'?window.location:undefined;var path=_location?_location.pathname+_location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}}var thenable={then:function then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch:function _catch(){return thenable;}};return thenable;},[]);var previousIndexRef=React.useRef(undefined);var previousStateRef=React.useRef(undefined);var pendingPopStatePathRef=React.useRef(undefined);React.useEffect(function(){previousIndexRef.current=history.index;return history.listen(function(){var _previousIndexRef$cur;var navigation=ref.current;if(!navigation||!enabled){return;}var path=location.pathname+location.search;var index=history.index;var previousIndex=(_previousIndexRef$cur=previousIndexRef.current)!==null&&_previousIndexRef$cur!==void 0?_previousIndexRef$cur:0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;var record=history.get(index);if((record===null||record===void 0?void 0:record.path)===path&&(record===null||record===void 0?void 0:record.state)){navigation.resetRoot(record.state);return;}var state=getStateFromPathRef.current(path,configRef.current);if(state&&index>previousIndex){var action=getActionFromState(state);if(action!==undefined){navigation.dispatch(action);}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,ref]);React.useEffect(function(){var _ref$current;if(!enabled){return;}if(ref.current){var state=ref.current.getRootState();var path=getPathFromStateRef.current(state,configRef.current);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path:path,state:state});}var onStateChange=function onStateChange(){var navigation,previousState,state,pendingPath,path,_findMatchingState,_findMatchingState2,previousFocusedState,focusedState,historyDelta,nextIndex,currentIndex;return _regeneratorRuntime.async(function onStateChange$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:navigation=ref.current;if(!(!navigation||!enabled)){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:previousState=previousStateRef.current;state=navigation.getRootState();pendingPath=pendingPopStatePathRef.current;path=getPathFromStateRef.current(state,configRef.current);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;_findMatchingState=findMatchingState(previousState,state),_findMatchingState2=_slicedToArray(_findMatchingState,2),previousFocusedState=_findMatchingState2[0],focusedState=_findMatchingState2[1];if(!(previousFocusedState&&focusedState&&path!==pendingPath)){_context2.next=37;break;}historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(!(historyDelta>0)){_context2.next=16;break;}history.push({path:path,state:state});_context2.next=35;break;case 16:if(!(historyDelta<0)){_context2.next=34;break;}nextIndex=history.backIndex({path:path});currentIndex=history.index;_context2.prev=19;if(!(nextIndex!==-1&&nextIndex<currentIndex)){_context2.next=25;break;}_context2.next=23;return _regeneratorRuntime.awrap(history.go(nextIndex-currentIndex));case 23:_context2.next=27;break;case 25:_context2.next=27;return _regeneratorRuntime.awrap(history.go(historyDelta));case 27:history.replace({path:path,state:state});_context2.next=32;break;case 30:_context2.prev=30;_context2.t0=_context2[\"catch\"](19);case 32:_context2.next=35;break;case 34:history.replace({path:path,state:state});case 35:_context2.next=38;break;case 37:history.replace({path:path,state:state});case 38:case\"end\":return _context2.stop();}}},null,null,[[19,30]],Promise);};return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.addListener('state',series(onStateChange));});return{getInitialState:getInitialState};}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getStateFromPath","getPathFromState","createMemoryHistory","index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","n","Math","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","last","listen","listener","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","isUsingLinking","enabled","getPathFromStateDefault","React","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","server","getInitialState","location","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","action","getActionFromState","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex","currentIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    // Make it a thenable to keep consistent with the native impl\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state && index > previousIndex) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({ path, state });\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}