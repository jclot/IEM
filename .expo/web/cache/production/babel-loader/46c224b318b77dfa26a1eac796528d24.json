{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{loadAsync}from\"./Font\";export function useFonts(map){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loaded=_useState2[0],setLoaded=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){loadAsync(map).then(function(){return setLoaded(true);}).catch(setError);},[]);return[loaded,error];}","map":{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":"iEAAA,OAAS,SAAT,CAAoB,QAApB,KAAoC,OAApC,CAEA,OAAS,SAAT,cAaA,MAAM,SAAU,CAAA,QAAV,CACJ,GADI,CAC8C,eAEtB,QAAQ,CAAC,KAAD,CAFc,wCAE3C,MAF2C,eAEnC,SAFmC,8BAGxB,QAAQ,CAAe,IAAf,CAHgB,yCAG3C,KAH2C,eAGpC,QAHoC,eAKlD,SAAS,CAAC,UAAK,CACb,SAAS,CAAC,GAAD,CAAT,CACG,IADH,CACQ,iBAAM,CAAA,SAAS,CAAC,IAAD,CAAf,EADR,EAEG,KAFH,CAES,QAFT,EAGD,CAJQ,CAIN,EAJM,CAAT,CAMA,MAAO,CAAC,MAAD,CAAS,KAAT,CAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(\n  map: string | { [fontFamily: string]: FontSource }\n): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}