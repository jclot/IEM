{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationRouteContext from\"./NavigationRouteContext\";import isArrayEqual from\"./isArrayEqual\";export default function useOnGetState(_ref){var getState=_ref.getState,getStateListeners=_ref.getStateListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addKeyedListener=_React$useContext.addKeyedListener;var route=React.useContext(NavigationRouteContext);var key=route?route.key:'root';var getRehydratedState=React.useCallback(function(){var state=getState();var routes=state.routes.map(function(route){var _getStateListeners$ro;var childState=(_getStateListeners$ro=getStateListeners[route.key])===null||_getStateListeners$ro===void 0?void 0:_getStateListeners$ro.call(getStateListeners);if(route.state===childState){return route;}return _objectSpread(_objectSpread({},route),{},{state:childState});});if(isArrayEqual(state.routes,routes)){return state;}return _objectSpread(_objectSpread({},state),{},{routes:routes});},[getState,getStateListeners]);React.useEffect(function(){return addKeyedListener===null||addKeyedListener===void 0?void 0:addKeyedListener('getState',key,getRehydratedState);},[addKeyedListener,getRehydratedState,key]);}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getStateListeners","addKeyedListener","React","route","key","getRehydratedState","state","getState","routes","childState","isArrayEqual"],"mappings":"k9BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAEA,MAAA,CAAA,wBAAA,kCAGA,MAAA,CAAA,sBAAA,gCACA,MAAA,CAAA,YAAA,sBAOA,cAAe,SAAA,CAAA,aAAA,MAGH,IAH0B,CAAA,QAG1B,MAH0B,QAG1B,CADVA,iBACU,MADVA,iBACU,uBACmBE,KAAK,CAALA,UAAAA,CAA7B,wBAA6BA,CADnB,CACFD,gBADE,mBACFA,gBADE,CAEV,GAAME,CAAAA,KAAK,CAAGD,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd,CACA,GAAME,CAAAA,GAAG,CAAGD,KAAK,CAAGA,KAAK,CAAR,GAAA,CAAjB,MAAA,CAEA,GAAME,CAAAA,kBAAkB,CAAG,KAAK,CAAL,WAAA,CAAkB,UAAM,CACjD,GAAMC,CAAAA,KAAK,CAAGC,QADmC,EACjD,CAGA,GAAMC,CAAAA,MAAM,CAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBL,SAAAA,KAAD,CAAW,CAAA,GAAA,CAAA,qBAAA,CACzC,GAAMM,CAAAA,UAAU,CAAA,CAAA,qBAAA,CAAGT,iBAAiB,CAACG,KAAK,CAA1B,GAAoB,CAApB,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGH,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB,CAEA,GAAIG,KAAK,CAALA,KAAAA,GAAJ,UAAA,CAAgC,CAC9B,MAAA,CAAA,KAAA,CACD,CAED,MAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAmBG,KAAK,CAAEG,UAA1B,CAAA,CAAA,CAPF,CAAe,CAAf,CAUA,GAAIC,YAAY,CAACJ,KAAK,CAAN,MAAA,CAAhB,MAAgB,CAAhB,CAAwC,CACtC,MAAA,CAAA,KAAA,CACD,CAED,MAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAmBE,MAAAA,CAAAA,MAAnB,CAAA,CAAA,CAlByB,CAAA,CAmBxB,CAAA,QAAA,CAnBH,iBAmBG,CAnBwB,CAA3B,CAqBAN,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,MAAOD,CAAAA,gBAAP,GAAA,IAAOA,EAAAA,gBAAP,GAAA,IAAA,EAAOA,CAAP,IAAA,EAAOA,CAAAA,gBAAgB,CAAA,UAAA,CAAA,GAAA,CAAvB,kBAAuB,CAAvB,CADFC,CAAAA,CAEG,CAAA,gBAAA,CAAA,kBAAA,CAFHA,GAEG,CAFHA,EAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}