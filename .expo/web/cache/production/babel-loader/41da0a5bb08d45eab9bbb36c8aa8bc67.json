{"ast":null,"code":"import*as React from'react';import{getStateFromPath,getActionFromState,NavigationContext}from'@react-navigation/core';import LinkingContext from\"./LinkingContext\";export default function useLinkTo(){var navigation=React.useContext(NavigationContext);var linking=React.useContext(LinkingContext);var linkTo=React.useCallback(function(path){if(!path.startsWith('/')){throw new Error(\"The path must start with '/' (\".concat(path,\").\"));}if(navigation===undefined){throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");}var options=linking.options;var state=(options===null||options===void 0?void 0:options.getStateFromPath)?options.getStateFromPath(path,options.config):getStateFromPath(path,options===null||options===void 0?void 0:options.config);if(state){var root=navigation;var current;while(current=root.dangerouslyGetParent()){root=current;}var action=getActionFromState(state);if(action!==undefined){root.dispatch(action);}else{root.reset(state);}}else{throw new Error('Failed to parse the path to a navigation state.');}},[linking,navigation]);return linkTo;}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","linking","linkTo","path","options","state","getStateFromPath","root","current","action","getActionFromState"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,gBAAA,CAAA,kBAAA,CAAA,iBAAA,KAAA,wBAAA,CAKA,MAAA,CAAA,cAAA,wBAEA,cAAe,SAAA,CAAA,SAAA,EAAqB,CAClC,GAAMA,CAAAA,UAAU,CAAGC,KAAK,CAALA,UAAAA,CAAnB,iBAAmBA,CAAnB,CACA,GAAMC,CAAAA,OAAO,CAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB,CAEA,GAAME,CAAAA,MAAM,CAAG,KAAK,CAAL,WAAA,CACZC,SAAAA,IAAD,CAAkB,CAChB,GAAI,CAACA,IAAI,CAAJA,UAAAA,CAAL,GAAKA,CAAL,CAA2B,CACzB,KAAM,IAAA,CAAA,KAAA,CAAA,iCAAA,MAAA,CAAA,IAAA,CAAN,IAAM,CAAA,CAAN,CACD,CAED,GAAIJ,UAAU,GAAd,SAAA,CAA8B,CAC5B,KAAM,IAAA,CAAA,KAAA,CAAN,sFAAM,CAAN,CAGD,CATe,GAWRK,CAAAA,OAXQ,CAWhB,OAXgB,CAWRA,OAXQ,CAahB,GAAMC,CAAAA,KAAK,CAAG,CAAA,OAAO,GAAP,IAAA,EAAA,OAAO,GAAA,IAAP,EAAA,CAAA,IAAA,EAAA,CAAA,OAAO,CAAP,gBAAA,EACVD,OAAO,CAAPA,gBAAAA,CAAAA,IAAAA,CAA+BA,OAAO,CAD5B,MACVA,CADU,CAEVE,gBAAgB,CAAA,IAAA,CAAOF,OAAP,GAAA,IAAOA,EAAAA,OAAP,GAAA,IAAA,EAAOA,CAAP,IAAA,EAAOA,CAAAA,OAAO,CAFlC,MAEoB,CAFpB,CAIA,GAAA,KAAA,CAAW,CACT,GAAIG,CAAAA,IAAI,CAAR,UAAA,CACA,GAFS,CAAA,OAET,CAGA,MAAQC,OAAO,CAAGD,IAAI,CAAtB,oBAAkBA,EAAlB,CAAgD,CAC9CA,IAAI,CAAJA,OAAAA,CACD,CAED,GAAME,CAAAA,MAAM,CAAGC,kBAAkB,CAAjC,KAAiC,CAAjC,CAEA,GAAID,MAAM,GAAV,SAAA,CAA0B,CACxBF,IAAI,CAAJA,QAAAA,CAAAA,MAAAA,EADF,CAAA,IAEO,CACLA,IAAI,CAAJA,KAAAA,CAAAA,KAAAA,EACD,CAfH,CAAA,IAgBO,CACL,KAAM,IAAA,CAAA,KAAA,CAAN,iDAAM,CAAN,CACD,CApCU,CAAA,CAsCb,CAAA,OAAA,CAtCF,UAsCE,CAtCa,CAAf,CAyCA,MAAA,CAAA,MAAA,CACD","sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.dangerouslyGetParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module"}