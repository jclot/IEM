{"ast":null,"code":"import*as React from'react';import useNavigation from\"./useNavigation\";export default function useFocusEffect(effect){var navigation=useNavigation();React.useEffect(function(){var isFocused=false;var cleanup;var callback=function callback(){var destroy=effect();if(destroy===undefined||typeof destroy==='function'){return destroy;}if(process.env.NODE_ENV!=='production'){var message='An effect function must not return anything besides a function, which is used for clean-up.';if(destroy===null){message+=\" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";}else if(typeof destroy.then==='function'){message+=\"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \"+'Instead, write the async function inside your effect '+'and call it immediately:\\n\\n'+'useFocusEffect(\\n'+'  React.useCallback() => {\\n'+'    async function fetchData() {\\n'+'      // You can await here\\n'+'      const response = await MyAPI.getData(someId);\\n'+'      // ...\\n'+'    }\\n\\n'+'    fetchData();\\n'+'  }, [someId])\\n'+'};\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';}else{message+=\" You returned: '\".concat(JSON.stringify(destroy),\"'\");}console.error(message);}};if(navigation.isFocused()){cleanup=callback();isFocused=true;}var unsubscribeFocus=navigation.addListener('focus',function(){if(isFocused){return;}if(cleanup!==undefined){cleanup();}cleanup=callback();isFocused=true;});var unsubscribeBlur=navigation.addListener('blur',function(){if(cleanup!==undefined){cleanup();}cleanup=undefined;isFocused=false;});return function(){if(cleanup!==undefined){cleanup();}unsubscribeFocus();unsubscribeBlur();};},[effect,navigation]);}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["navigation","useNavigation","React","isFocused","callback","destroy","effect","process","message","JSON","console","cleanup","unsubscribeFocus","unsubscribeBlur"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,aAAA,uBAWA,cAAe,SAAA,CAAA,cAAA,CAAA,MAAA,CAAgD,CAC7D,GAAMA,CAAAA,UAAU,CAAGC,aAAnB,EAAA,CAEAC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAb,KAAA,CACA,GAAA,CAAA,OAAA,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMC,CAAAA,OAAO,CAAGC,MAAhB,EAAA,CAEA,GAAID,OAAO,GAAPA,SAAAA,EAAyB,MAAA,CAAA,OAAA,GAA7B,UAAA,CAA4D,CAC1D,MAAA,CAAA,OAAA,CACD,CAED,GAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAJ,YAAA,CAA2C,CACzC,GAAIC,CAAAA,OAAO,CAAX,6FAAA,CAGA,GAAIH,OAAO,GAAX,IAAA,CAAsB,CACpBG,OAAO,EAAPA,kGAAAA,CADF,CAAA,IAGO,IAAI,MAAQH,CAAAA,OAAD,CAAP,IAAA,GAAJ,UAAA,CAAiD,CACtDG,OAAO,EACL,wFAAA,uDAAA,CAAA,8BAAA,CAAA,mBAAA,CAAA,8BAAA,CAAA,oCAAA,CAAA,+BAAA,CAAA,uDAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,oBAAA,CAAA,kBAAA,CAAA,QAAA,CADFA,oEAAAA,CADK,CAAA,IAgBA,CACLA,OAAO,EAAA,mBAAA,MAAA,CAAuBC,IAAI,CAAJA,SAAAA,CAAvB,OAAuBA,CAAvB,CAAPD,GAAO,CAAPA,CACD,CAEDE,OAAO,CAAPA,KAAAA,CAAAA,OAAAA,EACD,CAvCiB,CAIpB,CAuCA,GAAIV,UAAU,CAAd,SAAIA,EAAJ,CAA4B,CAC1BW,OAAO,CAAGP,QAAVO,EAAAA,CACAR,SAAS,CAATA,IAAAA,CACD,CAED,GAAMS,CAAAA,gBAAgB,CAAG,UAAU,CAAV,WAAA,CAAA,OAAA,CAAgC,UAAM,CAG7D,GAAA,SAAA,CAAe,CACb,OACD,CAED,GAAID,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDA,OAAO,CAAGP,QAAVO,EAAAA,CACAR,SAAS,CAATA,IAAAA,CAZF,CAAyB,CAAzB,CAeA,GAAMU,CAAAA,eAAe,CAAG,UAAU,CAAV,WAAA,CAAA,MAAA,CAA+B,UAAM,CAC3D,GAAIF,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDA,OAAO,CAAPA,SAAAA,CACAR,SAAS,CAATA,KAAAA,CANF,CAAwB,CAAxB,CASA,MAAO,WAAM,CACX,GAAIQ,OAAO,GAAX,SAAA,CAA2B,CACzBA,OAAO,GACR,CAEDC,gBAAgB,GAChBC,eAAe,GANjB,CAAA,CAxEFX,CAAAA,CAgFG,CAAA,MAAA,CAhFHA,UAgFG,CAhFHA,EAiFD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            '};\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned: '${JSON.stringify(destroy)}'`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"module"}