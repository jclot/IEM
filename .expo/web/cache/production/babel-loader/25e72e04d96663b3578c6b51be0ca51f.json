{"ast":null,"code":"export default function getFocusedRouteNameFromRoute(route){var _state$index;var state=route.state;var params=route.params;var routeName=state?state.routes[(_state$index=state.index)!==null&&_state$index!==void 0?_state$index:typeof state.type==='string'&&state.type!=='stack'?0:state.routes.length-1].name:typeof(params===null||params===void 0?void 0:params.screen)==='string'?params.screen:undefined;return routeName;}","map":{"version":3,"sources":["getFocusedRouteNameFromRoute.tsx"],"names":["state","route","params","routeName"],"mappings":"AAMA,cAAe,SAAA,CAAA,4BAAA,CAAA,KAAA,CAEO,CAAA,GAAA,CAAA,YAAA,CACpB,GAAMA,CAAAA,KAAK,CAAGC,KAAK,CAAnB,KAAA,CACA,GAAMC,CAAAA,MAAM,CAAGD,KAAK,CAApB,MAAA,CAEA,GAAME,CAAAA,SAAS,CAAGH,KAAK,CAEnBA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,YAAAA,CAGEA,KAAK,CAHPA,KAAAA,IAAAA,IAAAA,EAAAA,YAAAA,GAAAA,IAAAA,EAAAA,CAAAA,YAAAA,CAIK,MAAOA,CAAAA,KAAK,CAAZ,IAAA,GAAA,QAAA,EAAkCA,KAAK,CAALA,IAAAA,GAAlC,OAAA,CAAA,CAAA,CAEGA,KAAK,CAALA,MAAAA,CAAAA,MAAAA,CANRA,CAAAA,EAFmB,IAAA,CAWrB,OAAOE,MAAP,GAAA,IAAOA,EAAAA,MAAP,GAAA,IAAA,EAAOA,CAAP,IAAA,EAAOA,CAAAA,MAAM,CAAb,MAAA,IAAA,QAAA,CACEA,MAAM,CADR,MAAA,CAXF,SAAA,CAeA,MAAA,CAAA,SAAA,CACD","sourcesContent":["import type {\n  Route,\n  PartialState,\n  NavigationState,\n} from '@react-navigation/routers';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>> & { state?: PartialState<NavigationState> }\n): string | undefined {\n  const state = route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"]},"metadata":{},"sourceType":"module"}