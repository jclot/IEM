{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{SafeAreaProvider,SafeAreaConsumer,initialWindowSafeAreaInsets}from'react-native-safe-area-context';import{getStatusBarHeight,getBottomSpace}from'react-native-iphone-x-helper';var initialSafeAreaInsets=_objectSpread({top:getStatusBarHeight(true),bottom:getBottomSpace(),right:0,left:0},initialWindowSafeAreaInsets);export default function SafeAreaProviderCompat(_ref){var children=_ref.children;return React.createElement(SafeAreaConsumer,null,function(insets){if(insets){return children;}return React.createElement(SafeAreaProvider,{initialSafeAreaInsets:initialSafeAreaInsets},children);});}","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["initialSafeAreaInsets","top","getStatusBarHeight","bottom","getBottomSpace","right","left","children","insets"],"mappings":"k9BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,gBAAA,CAAA,gBAAA,CAAA,2BAAA,KAAA,gCAAA,CAKA,OAAA,kBAAA,CAAA,cAAA,KAAA,8BAAA,CAQA,GAAMA,CAAAA,qBAAqB,CAAA,aAAA,CAAA,CAEzBC,GAAG,CAAEC,kBAAkB,CAFE,IAEF,CAFE,CAGzBC,MAAM,CAAEC,cAHiB,EAAA,CAIzBC,KAAK,CAJoB,CAAA,CAKzBC,IAAI,CAAE,CALmB,CAAA,CAA3B,2BAA2B,CAA3B,CAeA,cAAe,SAAA,CAAA,sBAAA,MAAqD,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,CAClE,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,IAAA,CACIC,SAAAA,MAAD,CAAY,CACX,GAAA,MAAA,CAAY,CAIV,MAAA,CAAA,QAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,CAAkB,qBAAqB,CAAER,qBAAzC,CAAA,CADF,QACE,CADF,CAVN,CACE,CADF,CAkBD","sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nconst initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}