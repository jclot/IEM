{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _jsxFileName=\"/Users/brentvatne/code/react-native-appearance/src/index.tsx\";import React,{useMemo}from'react';import NativeEventEmitter from\"react-native-web/dist/exports/NativeEventEmitter\";import{EventEmitter}from'fbemitter';import{useSubscription}from'use-subscription';export*from\"./Appearance.types\";import{NativeAppearance,NativeAppearanceProvider}from\"./NativeAppearance\";var eventEmitter=new EventEmitter();var appearancePreferences=NativeAppearance.initialPreferences;var nativeEventEmitter=new NativeEventEmitter(NativeAppearance);nativeEventEmitter.addListener('appearanceChanged',function(newAppearance){Appearance.set(newAppearance);});export var Appearance=function(){function Appearance(){_classCallCheck(this,Appearance);}_createClass(Appearance,null,[{key:\"getColorScheme\",value:function getColorScheme(){return appearancePreferences.colorScheme;}},{key:\"set\",value:function set(preferences){var colorScheme=preferences.colorScheme;if(appearancePreferences.colorScheme!==colorScheme){appearancePreferences={colorScheme:colorScheme};eventEmitter.emit('change',preferences);}}},{key:\"addChangeListener\",value:function addChangeListener(listener){return eventEmitter.addListener('change',listener);}}]);return Appearance;}();export var AppearanceProvider=function AppearanceProvider(props){return React.createElement(NativeAppearanceProvider,_extends({style:{flex:1}},props,{__source:{fileName:_jsxFileName,lineNumber:70}}));};export function useColorScheme(){var subscription=useMemo(function(){return{getCurrentValue:function getCurrentValue(){return Appearance.getColorScheme();},subscribe:function subscribe(callback){var eventSubscription=Appearance.addChangeListener(callback);return function(){return eventSubscription.remove();};}};},[]);return useSubscription(subscription);}","map":{"version":3,"sources":["index.tsx"],"names":["eventEmitter","appearancePreferences","NativeAppearance","nativeEventEmitter","Appearance","colorScheme","preferences","AppearanceProvider","flex","subscription","useMemo","getCurrentValue","subscribe","eventSubscription","useSubscription"],"mappings":"qQAAA,MAAA,CAAA,KAAA,EAAA,OAAA,KAAA,OAAA,C,iFAEA,OAAA,YAAA,KAAA,WAAA,CACA,OAAA,eAAA,KAAA,kBAAA,CAEA,gCAGA,OAAA,gBAAA,CAAA,wBAAA,0BAGA,GAAMA,CAAAA,YAAY,CAAG,GAArB,CAAA,YAAqB,EAArB,CAGA,GAAIC,CAAAA,qBAA4C,CAAGC,gBAAgB,CAAnE,kBAAA,CAGA,GAAMC,CAAAA,kBAAkB,CAAG,GAAA,CAAA,kBAAA,CAA3B,gBAA2B,CAA3B,CACAA,kBAAkB,CAAlBA,WAAAA,CAAAA,mBAAAA,CAAoD,SAAA,aAAA,CAA0C,CAC5FC,UAAU,CAAVA,GAAAA,CAAAA,aAAAA,EADFD,CAAAA,EAIA,MAAA,IAAaC,CAAAA,UAAb,CAAA,UAAA,CAAA,QAAA,CAAA,UAAA,EAAA,CAAA,eAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,YAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,cAAA,EAa2C,CACvC,MAAOH,CAAAA,qBAAqB,CAA5B,WAAA,CAdJ,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,WAAA,CAwBuD,CAAA,GAC7CI,CAAAA,WAD6C,CAC7BC,WAD6B,CAAA,WAAA,CAInD,GAAIL,qBAAqB,CAArBA,WAAAA,GAAJ,WAAA,CAAuD,CACrDA,qBAAqB,CAAG,CAAEI,WAAW,CAArCJ,WAAwB,CAAxBA,CACAD,YAAY,CAAZA,IAAAA,CAAAA,QAAAA,CAAAA,WAAAA,EAEH,CAhCH,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,iBAAA,CAAA,QAAA,CAqC4E,CACxE,MAAOA,CAAAA,YAAY,CAAZA,WAAAA,CAAAA,QAAAA,CAAP,QAAOA,CAAP,CAtCJ,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CA8CA,MAAO,IAAMO,CAAAA,kBAAkB,CAAlBA,QAAAA,CAAAA,kBAAAA,CAAqB,KAArBA,CAAqB,CAAA,MAChC,CAAA,KAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,QAAA,CAAA,CAA0B,KAAK,CAAE,CAAEC,IAAI,CAAvC,CAAiC,CAAjC,CAAA,CAAA,KAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADgC,EAChC,CAAA,CAAA,CAAA,CADgC,CAA3B,CAAA,CAOP,MAAO,SAAA,CAAA,cAAA,EAA2C,CAChD,GAAMC,CAAAA,YAAY,CAAGC,OAAO,CAC1B,UAAA,CAAA,MAAO,CACLC,eAAe,CAAE,QAAA,CAAA,eAAA,EAAA,CAAA,MAAMP,CAAAA,UAAU,CAAhB,cAAMA,EAAN,CADZ,CAAA,CAELQ,SAAS,CAAE,QAAA,CAAA,SAAA,CAAA,QAAA,CAAkC,CAC3C,GAAIC,CAAAA,iBAAiB,CAAGT,UAAU,CAAVA,iBAAAA,CAAxB,QAAwBA,CAAxB,CACA,MAAO,WAAA,CAAA,MAAMS,CAAAA,iBAAiB,CAAvB,MAAMA,EAAN,CAAP,CAAA,CAJJ,CAAO,CAAP,CAD0B,CAAA,CAA5B,EAA4B,CAA5B,CAWA,MAAOC,CAAAA,eAAe,CAAtB,YAAsB,CAAtB,CACD","sourcesContent":["import React, { useMemo } from 'react';\nimport { NativeEventEmitter } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nimport { AppearancePreferences, ColorSchemeName, AppearanceListener } from './Appearance.types';\nexport * from './Appearance.types';\n\n// Native modules\nimport { NativeAppearance, NativeAppearanceProvider } from './NativeAppearance';\n\n// Initialize the user-facing event emitter\nconst eventEmitter = new EventEmitter();\n\n// Initialize preferences synchronously\nlet appearancePreferences: AppearancePreferences = NativeAppearance.initialPreferences;\n\n// Initialize the native event emitter\nconst nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', (newAppearance: AppearancePreferences) => {\n  Appearance.set(newAppearance);\n});\n\nexport class Appearance {\n  /**\n   * Note: Although appearance is available immediately, it may change (e.g\n   * Dark Mode) so any rendering logic or styles that depend on this should try\n   * to call this function on every render, rather than caching the value (for\n   * example, using inline styles rather than setting a value in a\n   * `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.get('colorScheme');`\n   *\n   * @param {string} preference Name of preference (e.g. 'colorScheme').\n   * @returns {ColorSchemeName} Value for the preference.\n   */\n  static getColorScheme(): ColorSchemeName {\n    return appearancePreferences.colorScheme;\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * appearanceChanged event.\n   *\n   * @param {object} appearancePreferences Simple string-keyed object of\n   * appearance preferences to set.\n   */\n  static set(preferences: AppearancePreferences): void {\n    let { colorScheme } = preferences;\n\n    // Don't bother emitting if it's the same value\n    if (appearancePreferences.colorScheme !== colorScheme) {\n      appearancePreferences = { colorScheme };\n      eventEmitter.emit('change', preferences);\n    }\n  }\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  static addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  }\n}\n\n/**\n * Temporarily require a Provider since the upstream implementation uses root view customizations\n * to accomplish this same behavior\n */\nexport const AppearanceProvider = (props: { children: any }) => (\n  <NativeAppearanceProvider style={{ flex: 1 }} {...props} />\n);\n\n/**\n * Subscribe to color scheme updates\n */\nexport function useColorScheme(): ColorSchemeName {\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => Appearance.getColorScheme(),\n      subscribe: (callback: AppearanceListener) => {\n        let eventSubscription = Appearance.addChangeListener(callback);\n        return () => eventSubscription.remove();\n      },\n    }),\n    [],\n  );\n\n  return useSubscription<ColorSchemeName>(subscription);\n}\n"]},"metadata":{},"sourceType":"module"}