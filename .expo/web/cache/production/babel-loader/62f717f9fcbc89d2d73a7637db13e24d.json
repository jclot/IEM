{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{canUseDOM}from'fbjs/lib/ExecutionEnvironment';import invariant from'fbjs/lib/invariant';var EventTypes=['url'];var listeners=[];export default{addEventListener:function addEventListener(type,listener){invariant(EventTypes.indexOf(type)!==-1,\"Linking.addEventListener(): \"+type+\" is not a valid event\");var nativeListener=function nativeListener(nativeEvent){return listener({url:window.location.href,nativeEvent:nativeEvent});};listeners.push({listener:listener,nativeListener:nativeListener});window.addEventListener('message',nativeListener,false);},removeEventListener:function removeEventListener(type,listener){invariant(EventTypes.indexOf(type)!==-1,\"Linking.removeEventListener(): \"+type+\" is not a valid event.\");var listenerIndex=listeners.findIndex(function(pair){return pair.listener===listener;});invariant(listenerIndex!==-1,'Linking.removeEventListener(): cannot remove an unregistered event listener.');var nativeListener=listeners[listenerIndex].nativeListener;window.removeEventListener('message',nativeListener,false);listeners.splice(listenerIndex,1);},canOpenURL:function canOpenURL(url){return _regeneratorRuntime.async(function canOpenURL$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",true);case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);},getInitialURL:function getInitialURL(){return _regeneratorRuntime.async(function getInitialURL$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(canUseDOM){_context2.next=2;break;}return _context2.abrupt(\"return\",'');case 2:return _context2.abrupt(\"return\",window.location.href);case 3:case\"end\":return _context2.stop();}}},null,null,null,Promise);},openURL:function openURL(url){return _regeneratorRuntime.async(function openURL$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(canUseDOM){window.location=new URL(url,window.location).toString();}case 1:case\"end\":return _context3.stop();}}},null,null,null,Promise);}};","map":{"version":3,"sources":["../src/ExpoLinking.web.ts"],"names":[],"mappings":"4DAAA,OAAS,SAAT,KAA0B,+BAA1B,CACA,MAAO,CAAA,SAAP,KAAsB,oBAAtB,CAIA,GAAM,CAAA,UAAU,CAAG,CAAC,KAAD,CAAnB,CAEA,GAAM,CAAA,SAAS,CAAmE,EAAlF,CAEA,cAAe,CACb,gBADa,2BACI,IADJ,CACiB,QADjB,CACsC,CACjD,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,IAA6B,CAAC,CADvB,gCAEwB,IAFxB,yBAAT,CAIA,GAAM,CAAA,cAAc,CAAsB,QAApC,CAAA,cAAoC,CAAA,WAAW,QACnD,CAAA,QAAQ,CAAC,CAAE,GAAG,CAAE,MAAM,CAAC,QAAP,CAAgB,IAAvB,CAA6B,WAAW,CAAX,WAA7B,CAAD,CAD2C,EAArD,CAEA,SAAS,CAAC,IAAV,CAAe,CAAE,QAAQ,CAAR,QAAF,CAAY,cAAc,CAAd,cAAZ,CAAf,EACA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,CAAmC,cAAnC,CAAmD,KAAnD,EACD,CAVY,CAYb,mBAZa,8BAYO,IAZP,CAYoB,QAZpB,CAYyC,CACpD,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,IAA6B,CAAC,CADvB,mCAE2B,IAF3B,0BAAT,CAIA,GAAM,CAAA,aAAa,CAAG,SAAS,CAAC,SAAV,CAAoB,SAAA,IAAI,QAAI,CAAA,IAAI,CAAC,QAAL,GAAkB,QAAtB,EAAxB,CAAtB,CACA,SAAS,CACP,aAAa,GAAK,CAAC,CADZ,CAEP,8EAFO,CAAT,CAIA,GAAM,CAAA,cAAc,CAAG,SAAS,CAAC,aAAD,CAAT,CAAyB,cAAhD,CACA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,CAAsC,cAAtC,CAAsD,KAAtD,EACA,SAAS,CAAC,MAAV,CAAiB,aAAjB,CAAgC,CAAhC,EACD,CAzBY,CA2BP,UA3BO,qBA2BI,GA3BJ,sJA6BJ,IA7BI,wEAgCP,aAhCO,uJAiCN,SAjCM,2DAiCY,EAjCZ,0CAkCJ,MAAM,CAAC,QAAP,CAAgB,IAlCZ,yEAqCP,OArCO,kBAqCC,GArCD,sHAsCX,GAAI,SAAJ,CAAe,CAEb,MAAM,CAAC,QAAP,CAAkB,GAAI,CAAA,GAAJ,CAAQ,GAAR,CAAa,MAAM,CAAC,QAApB,EAA8B,QAA9B,EAAlB,CACD,CAzCU,uEAAf","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = nativeEvent =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!canUseDOM) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (canUseDOM) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}