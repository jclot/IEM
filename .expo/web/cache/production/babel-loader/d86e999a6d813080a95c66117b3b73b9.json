{"ast":null,"code":"export default function checkLegacyPathConfig(config){var legacy=false;if(config){legacy=Object.keys(config).some(function(key){return key!=='screens'&&key!=='initialRouteName';});if(legacy&&(config.hasOwnProperty('screens')||config.hasOwnProperty('initialRouteName'))){throw new Error('Found invalid keys in the configuration object. See https://reactnavigation.org/docs/configuring-links/ for more details on the shape of the configuration object.');}}if(legacy){return[legacy,{screens:config}];}return[legacy,config];}","map":{"version":3,"sources":["checkLegacyPathConfig.tsx"],"names":["legacy","Object","key","config","screens"],"mappings":"AAOA,cAAe,SAAA,CAAA,qBAAA,CAAA,MAAA,CAEmB,CAChC,GAAIA,CAAAA,MAAM,CAAV,KAAA,CAEA,GAAA,MAAA,CAAY,CAEVA,MAAM,CAAGC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,IAAAA,CACNC,SAAAA,GAAD,QAASA,CAAAA,GAAG,GAAHA,SAAAA,EAAqBA,GAAG,GADnCF,kBACE,EADOC,CAATD,CAIA,GACEA,MAAM,GACLG,MAAM,CAANA,cAAAA,CAAAA,SAAAA,GACCA,MAAM,CAANA,cAAAA,CAHJ,kBAGIA,CAFI,CADR,CAIE,CACA,KAAM,IAAA,CAAA,KAAA,CAAN,oKAAM,CAAN,CAGD,CACF,CAED,GAAA,MAAA,CAAY,CAEV,MAAO,CAAA,MAAA,CAAS,CAAEC,OAAO,CAAED,MAAX,CAAT,CAAP,CACD,CAED,MAAO,CAAA,MAAA,CAAP,MAAO,CAAP,CACD","sourcesContent":["import type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\nexport default function checkLegacyPathConfig(\n  config?: Options\n): [boolean, Options | undefined] {\n  let legacy = false;\n\n  if (config) {\n    // Assume legacy configuration if config has any other keys except `screens` and `initialRouteName`\n    legacy = Object.keys(config).some(\n      (key) => key !== 'screens' && key !== 'initialRouteName'\n    );\n\n    if (\n      legacy &&\n      (config.hasOwnProperty('screens') ||\n        config.hasOwnProperty('initialRouteName'))\n    ) {\n      throw new Error(\n        'Found invalid keys in the configuration object. See https://reactnavigation.org/docs/configuring-links/ for more details on the shape of the configuration object.'\n      );\n    }\n  }\n\n  if (legacy) {\n    // @ts-expect-error: we have incorrect type for config since we don't type legacy config\n    return [legacy, { screens: config }];\n  }\n\n  return [legacy, config];\n}\n"]},"metadata":{},"sourceType":"module"}