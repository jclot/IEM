{"ast":null,"code":"function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{nanoid}from'nanoid/non-secure';var BaseRouter={getStateForAction:function getStateForAction(state,action){switch(action.type){case'SET_PARAMS':{var index=action.source?state.routes.findIndex(function(r){return r.key===action.source;}):state.index;if(index===-1){return null;}return _objectSpread(_objectSpread({},state),{},{routes:state.routes.map(function(r,i){return i===index?_objectSpread(_objectSpread({},r),{},{params:_objectSpread(_objectSpread({},r.params),action.payload.params)}):r;})});}case'RESET':{var nextState=action.payload;if(nextState.routes.length===0||nextState.routes.some(function(route){return!state.routeNames.includes(route.name);})){return null;}if(nextState.stale===false){if(state.routeNames.length!==nextState.routeNames.length||nextState.routeNames.some(function(name){return!state.routeNames.includes(name);})){return null;}return _objectSpread(_objectSpread({},nextState),{},{routes:nextState.routes.map(function(route){return route.key?route:_objectSpread(_objectSpread({},route),{},{key:\"\".concat(route.name,\"-\").concat(nanoid())});})});}return nextState;}default:return null;}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';}};export default BaseRouter;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","action","index","state","r","routes","params","nextState","route","name","key","nanoid","shouldActionChangeFocus"],"mappings":"k9BAAA,OAAA,MAAA,KAAA,mBAAA,CAWA,GAAMA,CAAAA,UAAU,CAAG,CACjBC,iBADiB,4BACA,KADA,CACA,MADA,CAIqB,CACpC,OAAQC,MAAM,CAAd,IAAA,EACE,IAAA,YAAA,CAAmB,CACjB,GAAMC,CAAAA,KAAK,CAAGD,MAAM,CAANA,MAAAA,CACVE,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBC,SAAAA,CAAD,QAAOA,CAAAA,CAAC,CAADA,GAAAA,GAAUH,MAAM,CADpCA,MACa,EAAvBE,CADUF,CAEVE,KAAK,CAFT,KAAA,CAIA,GAAID,KAAK,GAAK,CAAd,CAAA,CAAkB,CAChB,MAAA,KAAA,CACD,CAED,MAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAEEG,MAAM,CAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,CAAA,CAAA,CAAA,QACvB,CAAA,CAAC,GAAD,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CACYC,MAAM,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAOF,CAAC,CAAR,MAAA,CAAA,CAAoBH,MAAM,CAANA,OAAAA,CAApB,MAAA,CADlB,CAAA,CAAA,CADM,CAAiB,EAAjB,CAFV,CAAA,CAAA,CAQD,CAED,IAAA,OAAA,CAAc,CACZ,GAAMM,CAAAA,SAAS,CAAGN,MAAM,CAAxB,OAAA,CAEA,GACEM,SAAS,CAATA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,EACAA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CACGC,SAAAA,KAAD,QAA6B,CAACL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BK,KAAK,CAHjE,IAGkCL,CAA9B,EADFI,CAFF,CAKE,CACA,MAAA,KAAA,CACD,CAED,GAAIA,SAAS,CAATA,KAAAA,GAAJ,KAAA,CAA+B,CAC7B,GACEJ,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GAA4BI,SAAS,CAATA,UAAAA,CAA5BJ,MAAAA,EACAI,SAAS,CAATA,UAAAA,CAAAA,IAAAA,CACGE,SAAAA,IAAD,QAAU,CAACN,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAHf,IAGeA,CAAX,EADFI,CAFF,CAKE,CACA,MAAA,KAAA,CACD,CAED,MAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAEEF,MAAM,CAAE,SAAS,CAAT,MAAA,CAAA,GAAA,CAAsBG,SAAAA,KAAD,QAC3B,CAAA,KAAK,CAAL,GAAA,CAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAgCE,GAAG,CAAA,GAAA,MAAA,CAAKF,KAAK,CAAV,IAAA,CAAA,GAAA,EAAA,MAAA,CAAmBG,MAAnB,EAAA,CAAnC,CAAA,CAD2B,EAArB,CAFV,CAAA,CAAA,CAMD,CAED,MAAA,CAAA,SAAA,CACD,CAED,QACE,MAAA,KAAA,CAtDJ,CALe,CAAA,CA+DjBC,uBA/DiB,kCA+DM,MA/DN,CA+DuC,CACtD,MAAOX,CAAAA,MAAM,CAANA,IAAAA,GAAP,UAAA,CACD,CAjEgB,CAAnB,CAoEA,cAAA,CAAA,UAAA","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}