{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{AppOwnership,UserInterfaceIdiom}from\"./Constants.types\";import ExponentConstants from\"./ExponentConstants\";export{AppOwnership,UserInterfaceIdiom};if(!ExponentConstants){console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");}var manifest=null;if(ExponentConstants&&ExponentConstants.manifest){manifest=ExponentConstants.manifest;if(typeof manifest==='string'){manifest=JSON.parse(manifest);}}var _ref=ExponentConstants||{},name=_ref.name,appOwnership=_ref.appOwnership,constants=_objectWithoutProperties(_ref,[\"name\",\"appOwnership\"]);export default _objectSpread(_objectSpread({},constants),{},{appOwnership:appOwnership!=null?appOwnership:null,manifest:manifest,deviceId:constants.installationId,linkingUrl:constants.linkingUri});","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"o7BAAA,OAEE,YAFF,CAOE,kBAPF,yBAUA,MAAO,CAAA,iBAAP,2BAEA,OAEE,YAFF,CAOE,kBAPF,EAWA,GAAI,CAAC,iBAAL,CAAwB,CACtB,OAAO,CAAC,IAAR,CACE,wGADF,EAGD,CAGD,GAAI,CAAA,QAAQ,CAAG,IAAf,CACA,GAAI,iBAAiB,EAAI,iBAAiB,CAAC,QAA3C,CAAqD,CACnD,QAAQ,CAAG,iBAAiB,CAAC,QAA7B,CACA,GAAI,MAAO,CAAA,QAAP,GAAoB,QAAxB,CAAkC,CAChC,QAAQ,CAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAX,CACD,CACF,C,SAE6C,iBAAiB,EAAI,E,CAA3D,I,MAAA,I,CAAM,Y,MAAA,Y,CAAiB,S,wDAE/B,8CACK,SADL,MAGE,YAAY,CAAE,YAAF,OAAE,YAAF,CAAkB,IAHhC,CAIE,QAAQ,CAAR,QAJF,CAME,QAAQ,CAAE,SAAS,CAAC,cANtB,CAOE,UAAU,CAAE,SAAS,CAAC,UAPxB","sourcesContent":["import {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\n// On Android we pass the manifest in JSON form so this step is necessary\nlet manifest = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...constants } = (ExponentConstants || {}) as any;\n\nexport default {\n  ...constants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  manifest,\n  // Legacy aliases\n  deviceId: constants.installationId,\n  linkingUrl: constants.linkingUri,\n} as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}